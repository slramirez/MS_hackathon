10000-5500
4500/1200
255 * (1064/255)^(1/1.4)
255 * (1064/255)^(1.4)
install.packages(c("backports", "bayesplot", "broom", "callr", "chron", "cli", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "evaluate", "fansi", "foreign", "ggplot2", "ggridges", "ggthemes", "git2r", "glue", "haven", "htmlwidgets", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lattice", "lme4", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "mudata2", "MuMIn", "nloptr", "openssl", "packrat", "pillar", "pkgconfig", "processx", "psych", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reprex", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "scales", "shiny", "shinythemes", "StanHeaders", "stringi", "survival", "testthat", "tidyr", "tidyselect", "tinytex", "xfun", "XML", "xtable", "xts", "yaml", "zoo"))
shiny::runApp('Google Drive/Insight/Challenges/MS_hackathon/interactive_map')
# Data Manipulation
library(tidyverse)
# Spatial
library(rgdal)
library(sp)
# Interactive Plots
library(leaflet)
library(shinythemes)
library(shiny)
# Database
library(DBI)
library(dbplyr)
library(RSQLite)
# Connect to Hack DB.
con = dbConnect(SQLite(), dbname = "../data/MS_hackathon.db")
# List Tables
dbListTables(con)
# Set working directory
setwd("~/Google Drive/Insight/Challenges/MS_hackathon/interactive_map")
# Connect to Hack DB.
con = dbConnect(SQLite(), dbname = "../data/MS_hackathon.db")
# List Tables
dbListTables(con)
# List Fields in "..."
dbListFields(con, "GapMinderData")
# Query
query = dbSendQuery(con, "SELECT * FROM GapMinderData")
# Fetch query
df = dbFetch(query, n = -1)
# Clear query
dbClearResult(query)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn=getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
names(world) = tolower(names(world))
world@data = world@data %>% select(un,name,area,region,subregion)
names(world@data)[1] = 'unctry'
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
# Simplify the population categories
world@data$population = world@data$population/1000000 %>% round(2)
# Set some bins.
mybins=c(0,10,20,50,100,500,Inf)
mypalette = colorBin(palette="YlOrBr", domain=world@data$population, na.color="transparent", bins=mybins)
# Prepare the text for the tooltip:
mytext=paste("Country: ", world@data$name,"<br/>", "Area: ", world@data$area, "<br/>", "Population: ", round(world@data$population, 2), sep="") %>%
lapply(htmltools::HTML)
# Map plot
leaflet(world) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(population),
fillOpacity = 0.9, stroke=T,
color="white", weight=0.3, dashArray = "",
highlight = highlightOptions(
weight = 5, color = ~colorNumeric("Blues", population)(population),
dashArray = "", fillOpacity = 0.1, bringToFront = TRUE
),
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px", direction = "auto")
) %>%
addLegend(
pal=mypalette,  values=~population,  opacity=0.9,
title = "Population (M)", position = "bottomleft"
)
#Load in UN codes
un_codes = read_csv("../data/GapMinder_Raw_CSVs/UNCTRY_CODES.csv") %>% select(1,2)
un_codes
un_codes[str_detect(un_codes$ctry, pattern="Sud"),]
un_codes[str_detect(un_codes$ctry, pattern="S"),]
names(un_codes) = tolower(names(un_codes))
un_codes[str_detect(un_codes$ctry, pattern="Sud"),]
head(df)
# Query
query = dbSendQuery(con, "SELECT * FROM GapMinderData")
# Fetch query
df = dbFetch(query, n = -1)
# Clear query
dbClearResult(query)
df %>% select(country, unctry) %>% distinct() %>% filter(unctry == 0)
head(df)
df %>% filter(country = "Sudan")
df %>% filter(country == "Sudan")
df %>% filter(country == "South Sudan")
world@data
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn=getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
names(world) = tolower(names(world))
world@data = world@data %>% select(un,name,area,region,subregion)
names(world@data)[1] = 'unctry'
head(world@data)
world@data %>% filter(name == "Sudan")
df %>% filter(country == "Sudan") %>% head(1)
df %>% filter(unctry == 736) %>% head(1)
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
left_join(world@data, sub_df) %>% select(name, country, unctry)
world@data = full_join(world@data, sub_df)
full_join(world@data, sub_df) %>% select(name, country, unctry)
full_join(world@data, sub_df) %>% select(name, country, unctry)
# Read the file with the rgdal library in R
world_spdf=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
# Look at the info provided with the geospatial object
head(world_spdf@data)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(un,name,area,region,subregion)
world@data = world@data %>% select(formal_en,un_a3)
names(world@data)
names(world@data)[2] = 'unctry'
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
names(world@data)
class(world@data$unctry)
as.numeric(as.character((world@data$unctry)))
world@data$unctry=as.numeric(as.character((world@data$unctry)))
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
full_join(world@data, sub_df) %>% select(name, country, unctry)
names(world@data) = c('country', 'unctry')
names(world@data)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
names(world@data) = c('country', 'unctry')
names(world@data)
world@data$unctry=as.numeric(as.character((world@data$unctry)))
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
# Simplify the population categories
world@data$population = world@data$population/1000000 %>% round(2)
# Set some bins.
mybins=c(0,10,20,50,100,500,Inf)
mypalette = colorBin(palette="YlOrBr", domain=world@data$population, na.color="transparent", bins=mybins)
# Prepare the text for the tooltip:
mytext=paste("Country: ", world@data$name,"<br/>", "Area: ", world@data$area, "<br/>", "Population: ", round(world@data$population, 2), sep="") %>%
lapply(htmltools::HTML)
# Map plot
leaflet(world) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(population),
fillOpacity = 0.9, stroke=T,
color="white", weight=0.3, dashArray = "",
highlight = highlightOptions(
weight = 5, color = ~colorNumeric("Blues", population)(population),
dashArray = "", fillOpacity = 0.1, bringToFront = TRUE
),
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px", direction = "auto")
) %>%
addLegend(
pal=mypalette,  values=~population,  opacity=0.9,
title = "Population (M)", position = "bottomleft"
)
sub_df
world@data
world@data
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
world@data
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data$un_a3
as.character(world@data$un_a3)
as.numeric(as.character(world@data$un_a3))
names(world@data) = c('country', 'unctry')
world@data$unctry=as.numeric(as.character((world@data$unctry)))
world@data %>% filter(unctry == 4)
world@data
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
world@data
names(world@data) = c('country', 'unctry')
world@data
world@data$unctry
as.numeric(as.character((world@data$unctry)))
world@data$unctry=as.numeric(as.character((world@data$unctry)))
world@data
left_join(world@data, sub_df)
world@data
names(sub_df)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
names(world@data) = c('name', 'unctry')
world@data$unctry=as.numeric(as.character((world@data$unctry)))
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
world@data
# Simplify the population categories
world@data$population = world@data$population/1000000 %>% round(2)
# Set some bins.
mybins=c(0,10,20,50,100,500,Inf)
mypalette = colorBin(palette="YlOrBr", domain=world@data$population, na.color="transparent", bins=mybins)
# Prepare the text for the tooltip:
mytext=paste("Country: ", world@data$name,"<br/>", "Area: ", world@data$area, "<br/>", "Population: ", round(world@data$population, 2), sep="") %>%
lapply(htmltools::HTML)
# Map plot
leaflet(world) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(population),
fillOpacity = 0.9, stroke=T,
color="white", weight=0.3, dashArray = "",
highlight = highlightOptions(
weight = 5, color = ~colorNumeric("Blues", population)(population),
dashArray = "", fillOpacity = 0.1, bringToFront = TRUE
),
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px", direction = "auto")
) %>%
addLegend(
pal=mypalette,  values=~population,  opacity=0.9,
title = "Population (M)", position = "bottomleft"
)
world@data$country=="Norway"
world@data[world@data$country=="Norway",]
full_join(world@data, sub_df) %>% select(name, country, unctry)
full_join(world@data, sub_df) %>% select(name, country, unctry) %>% order_by(country)
df %>% filter(country == "Norway")
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
names(world@data) = c('name', 'unctry')
world@data$unctry=as.numeric(as.character((world@data$unctry)))
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
# Set some bins.
mybins=c(0,10,20,50,100,500,Inf)
mypalette = colorBin(palette="YlOrBr", domain=world@data$population, na.color="transparent", bins=mybins)
# Prepare the text for the tooltip:
mytext=paste("Country: ", world@data$name,"<br/>", "Area: ", world@data$area, "<br/>", "Population: ", round(world@data$population, 2), sep="") %>%
lapply(htmltools::HTML)
# Map plot
leaflet(world) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(population),
fillOpacity = 0.9, stroke=T,
color="white", weight=0.3, dashArray = "",
highlight = highlightOptions(
weight = 5, color = ~colorNumeric("Blues", population)(population),
dashArray = "", fillOpacity = 0.1, bringToFront = TRUE
),
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px", direction = "auto")
) %>%
addLegend(
pal=mypalette,  values=~population,  opacity=0.9,
title = "Population (M)", position = "bottomleft"
)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
names(world@data) = c('name', 'unctry')
world@data$unctry=as.numeric(as.character((world@data$unctry)))
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
full_join(world@data, sub_df) %>% select(name, country, unctry) %>% order_by(country)
rm(ls())
ls)
ls()
rm(list = ls())
ls()
# Set working directory
setwd("~/Google Drive/Insight/Challenges/MS_hackathon/interactive_map")
# Connect to Hack DB.
con = dbConnect(SQLite(), dbname = "../data/MS_hackathon.db")
# List Tables
dbListTables(con)
# List Fields in "..."
dbListFields(con, "GapMinderData")
# Query
query = dbSendQuery(con, "SELECT * FROM GapMinderData")
# Fetch query
df = dbFetch(query, n = -1)
# Clear query
dbClearResult(query)
# Read in the country file, select useful heading and turn to lower case
world=readOGR(dsn= "~/Downloads/ne_50m_admin_0_countries/", layer="ne_50m_admin_0_countries")
names(world) = tolower(names(world))
world@data = world@data %>% select(formal_en,un_a3)
names(world@data) = c('name', 'unctry')
world@data$unctry=as.numeric(as.character((world@data$unctry)))
world@data
# Join by UN country number.
sub_df = df %>% filter(date == 2005)
world@data = left_join(world@data, sub_df)
# Simplify the population categories
world@data$population = world@data$population/1000000 %>% round(2)
world@data$population
# Set some bins.
mybins=c(0,10,20,50,100,500,Inf)
mypalette = colorBin(palette="YlOrBr", domain=world@data$population, na.color="transparent", bins=mybins)
# Prepare the text for the tooltip:
mytext=paste("Country: ", world@data$name,"<br/>", "Area: ", world@data$area, "<br/>", "Population: ", round(world@data$population, 2), sep="") %>%
lapply(htmltools::HTML)
# Map plot
leaflet(world) %>%
addTiles()  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(population),
fillOpacity = 0.9, stroke=T,
color="white", weight=0.3, dashArray = "",
highlight = highlightOptions(
weight = 5, color = ~colorNumeric("Blues", population)(population),
dashArray = "", fillOpacity = 0.1, bringToFront = TRUE
),
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px", direction = "auto")
) %>%
addLegend(
pal=mypalette,  values=~population,  opacity=0.9,
title = "Population (M)", position = "bottomleft"
)
